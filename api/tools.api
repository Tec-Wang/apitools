syntax = "v1"

type (
	SendEmailReq {
		// 收件人列表（必填）
		To []string `json:"to"`
		// 抄送列表（可选）
		Cc []string `json:"cc,omitempty"`
		// 密送列表（可选）
		Bcc []string `json:"bcc,omitempty"`
		// 邮件主题（必填）
		Subject string `json:"subject"`
		// 邮件正文内容（必填）
		Content string `json:"content"`
		// 内容类型，如 "text/plain" 或 "text/html"（可选，默认为 text/plain）
		ContentType string `json:"content_type,omitempty"`
		// 发件人邮箱（可选，通常由系统配置）
		From string `json:"from,omitempty"`
		// 发件人显示名称（可选）
		FromName string `json:"from_name,omitempty"`
		// 回复邮箱（可选）
		ReplyTo string `json:"reply_to,omitempty"`
		// 邮件优先级：1-高，3-普通，5-低（可选）
		Priority int `json:"priority,omitempty"`
		// 附件列表（可选）
		Attachments []EmailAttachment `json:"attachments,omitempty"`
	}
	// 邮件附件结构
	EmailAttachment {
		// 附件文件名
		FileName string `json:"file_name"`
		// 附件内容（Base64编码）
		Content string `json:"content"`
		// 附件MIME类型
		ContentType string `json:"content_type"`
		// 附件大小（字节）
		Size int64 `json:"size,omitempty"`
	}
	SendEmailResp {
		// 响应状态码
		Code int64 `json:"code"`
		// 响应消息
		Message string `json:"message"`
		// 邮件ID（发送成功时返回）
		EmailId string `json:"email_id,omitempty"`
		// 发送时间戳
		SendTime int64 `json:"send_time,omitempty"`
	}
	// GitLab 提交记录查询请求
	GitCommitRecordReq {
		// 项目列表（必填），支持多个项目，格式：["group/project1", "group/project2"]
		Projects []string `json:"projects"`
		// 查询时间范围开始时间（可选），格式：YYYY-MM-DD 或 "today"
		StartDate string `json:"start_date"`
		// 查询时间范围结束时间（可选），格式：YYYY-MM-DD，不填默认为 start_date
		EndDate string `json:"end_date"`
		// 检索人用户名（必填）
		Username string `json:"username"`
		// GitLab 服务器地址（可选，使用系统配置）
		GitlabUrl string `json:"gitlab_url,optional"`
		// 访问令牌（可选，使用系统配置）
		AccessToken string `json:"access_token,optional"`
	}
	// 单个提交记录信息
	CommitInfo {
		// 提交ID
		CommitId string `json:"commit_id"`
		// 短提交ID
		ShortId string `json:"short_id"`
		// 提交标题
		Title string `json:"title"`
		// 提交消息
		Message string `json:"message"`
		// 作者名称
		AuthorName string `json:"author_name"`
		// 作者邮箱
		AuthorEmail string `json:"author_email"`
		// 提交时间
		CommittedDate string `json:"committed_date"`
		// 提交链接
		WebUrl string `json:"web_url"`
	}
	// 项目提交记录
	ProjectCommits {
		// 项目ID
		ProjectId int64 `json:"project_id"`
		// 项目名称
		ProjectName string `json:"project_name"`
		// 项目路径
		ProjectPath string `json:"project_path"`
		// 项目链接
		ProjectUrl string `json:"project_url"`
		// 提交记录列表
		Commits []CommitInfo `json:"commits"`
		// 提交数量
		CommitCount int64 `json:"commit_count"`
	}
	// GitLab 提交记录查询响应
	GitCommitRecordResp {
		// 响应状态码
		Code int64 `json:"code"`
		// 响应消息
		Message string `json:"message"`
		// 查询用户
		Username string `json:"username,omitempty"`
		// 查询日期范围
		DateRange string `json:"date_range,omitempty"`
		// 项目提交记录列表
		ProjectCommits []ProjectCommits `json:"project_commits,omitempty"`
		// 总结信息
		Summary GitCommitSummary `json:"summary,omitempty"`
	}
	// 提交记录总结
	GitCommitSummary {
		// 有提交的项目数
		ProjectsWithCommits int64 `json:"projects_with_commits"`
		// 总提交次数
		TotalCommits int64 `json:"total_commits"`
		// 检查的项目总数
		TotalProjects int64 `json:"total_projects"`
		// 查询的服务器地址
		GitlabServer string `json:"gitlab_server"`
	}
	AverageTimeReq {
		// 时间戳列表
		TimestampList []int64 `json:"timestamp_list"`
		// 计算类型
		CalculateType int `json:"calculate_type"`
	}
	AverageTimeResp {
		// 平均时间
		AverageTimestamp int64 `json:"average_timestamp"`
		// 平均时间
		AverageTime string `json:"average_time"`
	}
)

// 定义 HTTP 服务
// 微服务名称为 tools，生成的代码目录和配置文件将和 tools 值相关
@server (
	prefix: /email
	group:  email
)
service tools {
	// 定义 http.HandleFunc 转换的 go 文件名称及方法
	@handler SendEmail
	// 定义接口
	// 请求方法为 post
	// 路由为 /email/send
	// 请求体为 SendEmailReq
	// 响应体为 SendEmailResp，响应体必须有 returns 关键字修饰
	post /send (SendEmailReq) returns (SendEmailResp)
}

// GitLab 提交记录查询服务
@server (
	prefix: /work
	group:  work
)
service tools {
	// GitLab 提交记录查询接口
	@handler GitCodeCommitRecord
	// 定义接口
	// 请求方法为 post
	// 路由为 /work/git_code_commit_record
	// 请求体为 GitCommitRecordReq
	// 响应体为 GitCommitRecordResp
	post /git_code_commit_record (GitCommitRecordReq) returns (GitCommitRecordResp)
}

@server (
	prefix: /lark
	group:  lark
)
service tools {
	@handler AverageTime
	// 定义接口
	// 请求方法为 post
	// 路由为 /lark/average_time
	// 请求体为 AverageTimeReq
	// 响应体为 AverageTimeResp
	post /average_time (AverageTimeReq) returns (AverageTimeResp)
}

